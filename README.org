# -*- eval: (org-make-toc-mode 1); -*-
#+title: org-hide-drawers

#  LocalWords:  toc

# MELPA badge
#+HTML: <a href="https://melpa.org/#/pdf-meta-edit"><img alt="MELPA" src="https://melpa.org/packages/org-hide-drawers-badge.svg"/></a>

Org-hide-drawers "hides" org-mode drawers. "Hiding," in this case, means using overlays with the display property set to visually shorten them. This includes both property drawers and drawers in general (which are different org elements). The goal of this project is to reduce the visual clutter of org-mode buffers with many drawers.

You can see in the screenshot below that several drawers are displayed as a hash sign (“#") at the end of the line above where you’d normally see it:
[[file:screenshots/screenshot_1.png]]

* Table of contents
:PROPERTIES:
:TOC:      :include all :force (nothing) :ignore (this) :local (nothing)
:END:

:CONTENTS:
- [[#installation][Installation]]
- [[#usage][Usage]]
  - [[#user-options][User options]]
- [[#related-packages][Related packages]]
- [[#potential-features-and-contributing][Potential features and contributing]]
:END:

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

This project is officially packaged in the MELPA package repository. Please see [[https://melpa.org/#/getting-started][this guide by MELPA]] for instructions on how to make packages from MELPA available and how to install them.

* Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

1. Open an org buffer.  (Indirect buffers are supported by org-hide-drawers.)
2. Enable ~org-hide-drawers-mode~.  Drawers become "hidden": their displayed text is changed to ~org-hide-drawers-display-string~. The actual text remains unchanged.
3. Un-hide drawers by calling ~org-hide-drawers-toggle~, or ~org-hide-drawers-make-overlays~.
4. Hide drawers by calling ~org-hide-drawers-toggle~ again, or ~org-hide-drawers-delete-overlays~.

Users also have great flexibility to define which drawers are hidden and which aren’t as well as what display string to use for each drawer. See [[#user-options][User options]] for how to customize org-hide-drawers.

To see all commands available, do =C-h a org-hide-drawers- RET=, or =M-x apropos-command org-hide-drawers- RET=.

** User options
:PROPERTIES:
:CUSTOM_ID: user-options
:END:

There is only one user option: ~org-hide-drawers-display-strings~. With this option alone users can specify exactly which drawers or property drawers to hide and what display strings to use for each hidden drawer. The docstring of ~org-hide-drawers-display-strings~ is comprehensive. It describes all possible ways to match against drawers and specify display strings as well as provides several examples to illustrate how users can customize the option to achieve various behaviors.

To help users get started, below are several example values of ~org-hide-drawers-display-strings~:
#+begin_src emacs-lisp
  ;; Keep the top-level property drawer shown.
  (setopt org-hide-drawers-display-strings
          '((top-level-property-drawer nil)))

  ;; Keep drawers matching the "^CONTENTS$" regexp shown.
  (setopt org-hide-drawers-display-strings
          '((drawer-regexp nil "^CONTENTS$")))

  ;; Make all drawers and property drawers entirely hidden.
  (setopt org-hide-drawers-display-strings
          '((all "")))

  ;; Visually replace property drawers with the "ID" property with the
  ;; " [Hidden...]" string, with the shadow face applied.
  (setopt org-hide-drawers-display-strings
          '((property-drawer-regexp (propertize " [Hidden...]" 'face 'shadow) "ID")))
#+end_src

* Related packages
:PROPERTIES:
:CUSTOM_ID: related-packages
:END:

+ [[https://github.com/jxq0/org-tidy][jxq0/org-tidy]]
  Org-tidy aims to fulfill the same purpose as this project: hiding org-mode drawers with overlays. However, our implementations differ. This project's implementation fixes many of [[https://github.com/jxq0/org-tidy/issues][the existing bugs]] in that package. Org-tidy’s bugs are closely tied to its implementation, so org-hide-drawers resolves them by implementing similar functionality differently.

  Additionally, this project’s code base has fewer lines of code and its logic is much easier to extend, thus affording more flexibility with potential future features.

  Finally, with ~org-hide-drawers-display-strings~, org-hide-drawers affords users more customizability to specify the display strings used to used drawers.

* Potential features and contributing
:PROPERTIES:
:CUSTOM_ID: potential-features-and-contributing
:END:

If there is a feature or functionality you would like to see in org-hide-drawers, I welcome you to simply open an issue. As mentioned above, org-hide-drawers is designed to be simple, easy to work with, and easy to extend. And as always, pull requests are welcome.
